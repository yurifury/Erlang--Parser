#!/usr/bin/env ruby

$: << "./paxis"

require 'paxis'

class ASTRoot
    def initialize(*stmts)
	@stmts = stmts
    end

    def to_erlang
	@stmts.map(&:to_erlang).join(".\n") + "."
    end

    attr_accessor :stmts
end

class ASTDirective
    def initialize(directive, val)
	@directive, @val = directive, val
    end

    def to_erlang
	"-#@directive(#@val)"
    end

    attr_accessor :directive
    attr_accessor :val
end

class ASTDefine
    def initialize(name, stmtlist)
	@name, @stmtlist = name, stmtlist
    end

    def to_erlang
	"#@name() ->\n" + @stmtlist.map {|s| "    " + s.to_erlang}.join("\n")
    end

    attr_accessor :name
    attr_accessor :stmtlist
end

class ASTHelperList
    def initialize(*stmts)
	@stmts = stmts
    end

    def to_erlang
	raise "ASTHelperList #{inspect} found its way into reality"
    end

    attr_accessor :stmts
end

class ASTImmString
    def initialize val
	@val = val
    end

    def to_erlang
	@val.inspect # XXX
    end

    attr_accessor :val
end

class ASTExtCall
    def initialize mod, fun, args
	@mod, @fun, @args = mod, fun, args
    end

    def to_erlang
	"#@mod:#@fun(#{@args.map(&:to_erlang).join(", ")})"
    end

    attr_accessor :mod
    attr_accessor :fun
    attr_accessor :args
end

class ASTImmList
    def initialize *items
	@items = items
    end

    def to_erlang
	"[" + @items.map(&:to_erlang).join(", ") + "]"
    end

    attr_accessor :items
end

Erlang = Paxis.make do
    DIRECTIVE /-([a-z]+)\(/
    RPAREN /\)/
    ATOM /[a-zA-Z_]+/
    PERIOD /\./
    INTCALL /([a-zA-Z_]+)\(/
    EXTCALL /([a-zA-Z_]+):([a-zA-Z_]+)\(/
    RARROW /->/
    STRING /"([^"]*)"/
    WHITESPACE /[\n \t]+/
    COMMA /,/
    LISTOPEN /\[/
    LISTCLOSE /\]/

    root(rootstmt) {ASTRoot.new rootstmt}
    root(root, root) {ASTRoot.new *(root_1.stmts + root_2.stmts)}
    rootstmt(DIRECTIVE, ATOM, RPAREN, PERIOD) {ASTDirective.new DIRECTIVE[0], ATOM[0]}
    rootstmt(INTCALL, RPAREN, RARROW, stmtlist, PERIOD) {ASTDefine.new INTCALL[0], stmtlist.stmts}
    stmtlist(stmt) {ASTHelperList.new stmt}
    stmtlist(stmtlist, COMMA, stmt) {ASTHelperList.new *(stmtlist.stmts + [stmt])}
    stmt(call) {call}
    stmt(STRING) {ASTImmString.new STRING[0]}
    stmt(list) {list}
    call(EXTCALL, stmtlist, RPAREN) {ASTExtCall.new EXTCALL[0], EXTCALL[1], stmtlist.stmts}
    list(LISTOPEN, stmtlist, LISTCLOSE) {ASTImmList.new *stmtlist.stmts}
end

r = Erlang.start(File.read(ARGV[0]))[0][1]
puts r.to_erlang

File.open(ARGV[0].gsub(/\.erl$/, "") + ".cgrw", "wb") {|o|}

# vim: set sw=4 ts=8 noet:
